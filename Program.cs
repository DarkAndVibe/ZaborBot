using System;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;

namespace ZaborCalculator
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.Title = "ü§ñ ZaborCalculator Bot - –ó–∞–ø—É—â–µ–Ω";

            // –°–æ–∑–¥–∞–µ–º —Ö–æ—Å—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π —Å–ª—É–∂–±—ã
            var host = Host.CreateDefaultBuilder(args)
                .ConfigureServices((context, services) =>
                {
                    services.AddSingleton<TelegramBotClient>(provider =>
                    {
                        var botToken = "7614942762:AAGboaA9MoTVUHhl4aXdTj6Wf1PgYZPRW2Q";
                        return new TelegramBotClient(botToken);
                    });
                    services.AddHostedService<BotBackgroundService>();
                    services.AddSingleton<BotService>();
                })
                .Build();

            await host.RunAsync();
        }
    }

    // –§–æ–Ω–æ–≤–∞—è —Å–ª—É–∂–±–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    public class BotBackgroundService : BackgroundService
    {
        private readonly TelegramBotClient _botClient;
        private readonly BotService _botService;

        public BotBackgroundService(TelegramBotClient botClient, BotService botService)
        {
            _botClient = botClient;
            _botService = botService;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            try
            {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                await SetBotInfoAsync();

                var me = await _botClient.GetMeAsync(cancellationToken: stoppingToken);
                Console.WriteLine($"‚úÖ –ë–æ—Ç @{me.Username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
                Console.WriteLine($"üìõ –ò–º—è: {me.FirstName}");
                Console.WriteLine("üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...");
                Console.WriteLine("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");

                var receiverOptions = new ReceiverOptions
                {
                    AllowedUpdates = Array.Empty<UpdateType>()
                };

                var updateReceiver = new QueuedUpdateReceiver(_botClient, receiverOptions);

                await foreach (var update in updateReceiver.WithCancellation(stoppingToken))
                {
                    await _botService.HandleUpdateAsync(update, stoppingToken);
                }
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        private async Task SetBotInfoAsync()
        {
            try
            {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —á–µ—Ä–µ–∑ BotFather
                Console.WriteLine("‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:");
                Console.WriteLine("üìõ –ò–º—è: ZaborCalculator Bot");
                Console.WriteLine("üë§ Username: ZaborCalculatorBot");
                Console.WriteLine("üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–±–æ—Ä–∞");
                Console.WriteLine("üé® –ê–≤–∞—Ç–∞—Ä: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ @BotFather");
                Console.WriteLine("üí¨ –ö–æ–º–∞–Ω–¥—ã: /start, /help, /restart");

                // –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ @BotFather:
                // 1. –ù–∞–ø–∏—à–∏—Ç–µ /setuserpic –≤ @BotFather
                // 2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
                // 3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {ex.Message}");
            }
        }
    }

    // –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
    public class BotService
    {
        public static Dictionary<long, UserState> userStates = new Dictionary<long, UserState>();
        private readonly TelegramBotClient _botClient;

        public BotService(TelegramBotClient botClient)
        {
            _botClient = botClient;
        }

        public async Task HandleUpdateAsync(Update update, CancellationToken cancellationToken)
        {
            if (update.Message is not { } message)
                return;

            var chatId = message.Chat.Id;
            var userState = GetUserState(chatId);

            try
            {
                Console.WriteLine($"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.Chat.FirstName} ({chatId}): {message.Text}");

                if (message.Text != null && message.Text.StartsWith("/"))
                {
                    await HandleCommand(message, userState, cancellationToken);
                    return;
                }

                await HandleUserInput(message, userState, cancellationToken);
            }
            catch (Exception ex)
            {
                await _botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    cancellationToken: cancellationToken);
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chatId}: {ex.Message}");
            }
        }

        private UserState GetUserState(long chatId)
        {
            if (!userStates.ContainsKey(chatId))
                userStates[chatId] = new UserState();
            return userStates[chatId];
        }

        private async Task HandleCommand(Message message, UserState state, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id;
            var command = message.Text?.ToLower().Trim();

            switch (command)
            {
                case "/start":
                case "/restart":
                    state.Reset();
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî ZaborCalculator Bot ü§ñ\n\n–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–±–æ—Ä–∞.\n\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n" +
                              "1. üèóÔ∏è –ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª\n2. üï∏Ô∏è –°–µ—Ç–∫–∞ —Ä–∞–±–∏—Ü–∞\n3. üå≥ –î–µ—Ä–µ–≤–æ\n\n–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞.",
                        cancellationToken: cancellationToken);
                    state.Step = Step.AwaitingMaterial;
                    break;

                case "/help":
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "üõ†Ô∏è *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n" +
                              "/start - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç\n" +
                              "/restart - —Å–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n" +
                              "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
                              "üìä *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n" +
                              "1. –í—ã–±–∏—Ä–∞–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª\n" +
                              "2. –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ –¥–ª–∏–Ω—É\n" +
                              "3. –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤—ã—Å–æ—Ç—É\n" +
                              "4. –ü–æ–ª—É—á–∞–µ—Ç–µ —Ä–∞—Å—á–µ—Ç!",
                        parseMode: ParseMode.Markdown,
                        cancellationToken: cancellationToken);
                    break;

                default:
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                        cancellationToken: cancellationToken);
                    break;
            }
        }

        private async Task HandleUserInput(Message message, UserState state, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id;
            var text = message.Text?.Trim();

            if (string.IsNullOrEmpty(text))
                return;

            switch (state.Step)
            {
                case Step.None:
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "üëã –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–±–æ—Ä–∞.",
                        cancellationToken: cancellationToken);
                    break;

                case Step.AwaitingMaterial:
                    if (int.TryParse(text, out int materialChoice) && materi
                        —ä\
                            alChoice >= 1 && materialChoice <= 3)
                    {
                        state.Material = materialChoice switch
                        {
                            1 => "üèóÔ∏è –ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª",
                            2 => "üï∏Ô∏è –°–µ—Ç–∫–∞ —Ä–∞–±–∏—Ü–∞",
                            3 => "üå≥ –î–µ—Ä–µ–≤–æ",
                            _ => "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        };
                        state.MaterialPricePerMeter = materialChoice switch
                        {
                            1 => 1500,
                            2 => 800,
                            3 => 2000,
                            _ => 0
                        };
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "üìè –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):",
                            cancellationToken: cancellationToken);
                        state.Step = Step.AwaitingLength;
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.",
                            cancellationToken: cancellationToken);
                    }
                    break;

                case Step.AwaitingLength:
                    if (double.TryParse(text, out double length) && length > 0)
                    {
                        state.Length = length;
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "üìê –í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –∑–∞–±–æ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2):",
                            cancellationToken: cancellationToken);
                        state.Step = Step.AwaitingHeight;
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                            cancellationToken: cancellationToken);
                    }
                    break;

                case Step.AwaitingHeight:
                    if (double.TryParse(text, out double height) && height > 0)
                    {
                        state.Height = height;
                        double totalCost = state.Length * state.MaterialPricePerMeter * state.Height;

                        var result = new StringBuilder();
                        result.AppendLine("‚úÖ *–†–∞—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!*");
                        result.AppendLine($"‚ñ´Ô∏è *–ú–∞—Ç–µ—Ä–∏–∞–ª:* {state.Material}");
                        result.AppendLine($"‚ñ´Ô∏è *–î–ª–∏–Ω–∞:* {state.Length} –º");
                        result.AppendLine($"‚ñ´Ô∏è *–í—ã—Å–æ—Ç–∞:* {state.Height} –º");
                        result.AppendLine($"‚ñ´Ô∏è *–¶–µ–Ω–∞ –∑–∞ –ø–æ–≥.–º:* {state.MaterialPricePerMeter} —Ä—É–±");
                        result.AppendLine($"üí∞ *–ò—Ç–æ–≥–æ:* {totalCost:N0} —Ä—É–±");
                        result.AppendLine("");
                        result.AppendLine("üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start");

                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: result.ToString(),
                            parseMode: ParseMode.Markdown,
                            cancellationToken: cancellationToken);
                        state.Reset();
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                            cancellationToken: cancellationToken);
                    }
                    break;
            }
        }
    }

    public class UserState
    {
        public Step Step { get; set; } = Step.None;
        public string Material { get; set; }
        public double MaterialPricePerMeter { get; set; }
        public double Length { get; set; }
        public double Height { get; set; }

        public void Reset()
        {
            Step = Step.None;
            Material = null;
            MaterialPricePerMeter = 0;
            Length = 0;
            Height = 0;
        }
    }

    public enum Step
    {
        None,
        AwaitingMaterial,
        AwaitingLength,
        AwaitingHeight
    }
}